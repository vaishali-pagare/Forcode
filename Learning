LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'custom_format': {
            'format': '[%(asctime)s] [%(levelname)s] [%(name)s]: %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'custom_format',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'custom_format',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}




class ExampleAPIView(APIView):
    logger = logging.getLogger(__name__)

    def get(self, request):
        try:
            # Your logic here
            data = {'message': 'This is a sample API response.'}
            self.logger.debug('API response data: %s', data)
            self.logger.info('API request successful.')
            # Return your response using Response class or other appropriate methods
            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            self.logger.exception('Error occurred in API: %s', str(e))
            # Handle the exception and return an error response
            return Response({'error': 'An error occurred.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

_____________


class ExampleAPIView(APIView):
    logger = logging.getLogger(__name__)

    def get(self, request):
        try:
            # Your logic here
            data = {'message': 'This is a sample API response.'}
            # Log the data along with a custom message using the 'extra' parameter
            self.logger.info('API request successful.', extra={'data': data})
            # Return your response using Response class or other appropriate methods
            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            # Log the error message along with the traceback and additional data
            self.logger.exception('Error occurred in API: %s', str(e), extra={'data': data})
            # Handle the exception and return an error response
            return Response({'error': 'An error occurred.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

++++++


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'custom_format': {
            'format': '[%(asctime)s] [%(levelname)s] [%(name)s]: %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'custom_format',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',  # Change this to your desired log file path.
            'formatter': 'custom_format',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'your_app_name': {
            'handlers': ['file'],  # Log your app's logs to the file.
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
